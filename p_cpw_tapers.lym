<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>"""
This sample PCell implements a library called "CPWdesign" with a single PCell that
draws a PCPWTapers. This parametric array allows the user to create a tapered CPW 
tranforming one CPW design to another. Used e.g. for transitions from PCB to 
a desired CPW transmission line. There are three possible taper designs:
- linear taper
- exponential taper
- sine taper
Written in KLayout 0.27.1.

NOTE: after changing the code, the macro needs to be rerun to install the new
implementation.

Created by Jan Klima on 2024/11/15
Last update: 2024/11/24
"""

import pya
import numpy as np


class PCPWTapers(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the PCPWTapers
  """

  def __init__(self):

    # Important: initialize the super class
    super(PCPWTapers, self).__init__()

    # declare the parameters
    self.param("l", self.TypeLayer, "Layer", default=pya.LayerInfo(1, 0))
    self.param("ref", self.TypeShape, "", default=pya.DPoint(0, 0))  # reference point
    self.param("taper_type", self.TypeString, "Taper type", choices=[["linear", "lin"], ["exponential", "exp"], ["sine", "sin"]], default="lin")
    self.param("ppt", self.TypeInt, "Points per transition", default=11)  # including edge points
    self.param("sig0", self.TypeDouble, "Signal width 0 (µm)", default=16.0)
    self.param("gap0", self.TypeDouble, "Gap width 0 (µm)", default=8.0)
    self.param("gnd0", self.TypeDouble, "Ground width 0 (µm)", default=32.0)
    self.param("ext0", self.TypeDouble, "CPW length 0 (µm)", default=10.0)
    self.param("sig1", self.TypeDouble, "Signal width 1 (µm)", default=8.0)
    self.param("gap1", self.TypeDouble, "Gap width 1 (µm)", default=4.0)
    self.param("gnd1", self.TypeDouble, "Ground width 1 (µm)", default=16.0)
    self.param("ext1", self.TypeDouble, "CPW length 1 (µm)", default=10.0)
    self.param("exp_m", self.TypeDouble, "Exponential factor", default=3.0, readonly=False)  # cannot be changed dynamically :(, so always editable
    self.param("trlen", self.TypeDouble, "Transition length (µm)", default=10)
    self.param("dev", self.TypeDouble, "Max. deviation (%)", default=2)
    self.param("rec_trlen", self.TypeDouble, "Recommended minimal\ntransition length (µm)", readonly=True)

  def display_text_impl(self):
    """Provide a descriptive text for the cell"""
    return f"PCPWTaper(L={str(self.l)},{self.taper_type})"
  
  def coerce_parameters_impl(self):
    """Recalculate parameters"""
    for i in [self.trlen, self.sig0, self.gap0, self.gnd0, self.ext0, self.sig0, self.gap0, self.gnd0, self.ext0]:
      # Python implementation does not allow min_value parameter, thus this workaround
      if i &lt; 0:
        i = 0
    if self.ppt &lt; 2: # minimum value
      self.ppt = 2
    self.rec_trlen = self._recommend_length()
  
  def can_create_from_shape_impl(self):
    """Implement the "Create PCell from shape" protocol"""
    # too complicated, no implementation
    return False
  
  def parameters_from_shape_impl(self):
    """Implement the "Create PCell from shape" protocol"""
    # no implementation
  
  def transformation_from_shape_impl(self):
    """Implement the "Create PCell from shape" protocol"""
    # we use a default (0,0) coordinates
    return pya.Trans(pya.Point(0,0))
  
  def _lin_taper(self, xs, ystart, ystop, *args):
    """Returns a list of y values for a linear taper at points `xs`.
    xs - 1darray (usually 0 to self.trlen), ystart - float, ystop - float,
    no args used
    """
    return (xs-xs[0])*(ystop-ystart)/(xs[-1]-xs[0])+ystart
  
  def _exp_taper(self, xs, ystart, ystop, *args):
    """Returns a list of y values for a exponential taper at points `xs`.
    xs - 1darray (usually 0 to self.trlen), ystart - float, ystop - float,
    args[0] - float, &gt; 0 (usually also &gt; 1), modifier of the exponential
    """
    return (ystop + (np.exp(-(xs-xs[0])/(xs[-1]-xs[0])*args[0])-np.exp(-args[0]))
            / (1-np.exp(-args[0]))*(ystart-ystop))

  def _sin_taper(self, xs, ystart, ystop, *args):
    """Returns a list of y values for a sinusoidal taper at points `xs`.
    xs - 1darray (usually 0 to self.trlen), ystart - float, ystop - float,
    no args used
    """
    return ystart + np.sin(np.pi/2*(xs-xs[0])/(xs[-1]-xs[0]))**2*(ystop-ystart)
  
  def _recommend_length(self):
    """Estimate a minimal length of the transition to satisfy the maximum
    deviation in the gap/impedance/whatever.
    """
    # make the transition
    xs = np.linspace(0, self.trlen, self.ppt) + self.ext0
    # ### Maybe change the number of pts to some better (fixed) value, 
    #   so that the estimate is independent of chosed ppt.
    if self.taper_type == "lin":  # select correct taper function
      func = self._lin_taper
      ind = 1  # index where to compute the deviation
    elif self.taper_type == "exp":
      func = self._exp_taper
      ind = 1 if self.exp_m &gt;= 0 else -2
    elif self.taper_type == "sin":
      func = self._sin_taper
      ind = self.ppt//2
    else:
      raise Exception(f"Wrong taper type {self.taper_type}")
    y_g = func(xs, self.sig0/2+self.gap0, self.sig1/2+self.gap1, self.exp_m)  # bottom profile of top ground
    rec_len = (y_g[ind+1]-y_g[ind-1])*self.ppt/2/np.tan(np.arccos(1-self.dev/100))
    return np.round(np.abs(rec_len), 3-int(np.round(np.log10(np.abs(rec_len)))))
  
  def produce_impl(self):
    """This is the main part of the implementation: create the layout"""
    
    # origin in the (x=0, y_min), i.e. leftmost center -&gt; construct in +-y and +x directions
    
    # fetch the parameters
    dbu = self.layout.dbu  # database unit
    
    def todbu(_x):
      """Convert a float to dbu units and round to an integer."""
      return int(round(_x/dbu))
    
    # ### calculate the positions (lattice) ###
    # Box(ints: left, bottom, right, top)
    # CPW0 signal
    cpw0_s = (0, todbu(-self.sig0/2), todbu(self.ext0), todbu(self.sig0/2))
    # CPW0 ground top
    cpw0_gt = (0, todbu(self.sig0/2+self.gap0), 
               todbu(self.ext0), todbu(self.sig0/2+self.gap0+self.gnd0))
    # CPW0 ground bottom
    cpw0_gb = (0, -todbu(self.sig0/2+self.gap0+self.gnd0),
               todbu(self.ext0), -todbu(self.sig0/2+self.gap0))
    # CPW1 signal
    cpw1_s = (todbu(self.ext0+self.trlen), -todbu(self.sig1/2),
              todbu(self.ext0+self.trlen+self.ext1), todbu(self.sig1/2))
    # CPW1 ground top
    cpw1_gt = (todbu(self.ext0+self.trlen), todbu(self.sig1/2+self.gap1),
               todbu(self.ext0+self.trlen+self.ext1), todbu(self.sig1/2+self.gap1+self.gnd1))
    # CPW1 ground bottom
    cpw1_gb = (todbu(self.ext0+self.trlen), -todbu(self.sig1/2+self.gap1+self.gnd1),
               todbu(self.ext0+self.trlen+self.ext1), -todbu(self.sig1/2+self.gap1))

    for i in (cpw0_s, cpw0_gt, cpw0_gb, cpw1_s, cpw1_gt, cpw1_gb):
      self.cell.shapes(self.l_layer).insert(pya.Box(*i))
    
    # make the transition
    xs = np.linspace(0, self.trlen, self.ppt) + self.ext0
    if self.taper_type == "lin":  # select correct taper function
      func = self._lin_taper
    elif self.taper_type == "exp":
      func = self._exp_taper
    elif self.taper_type == "sin":
      func = self._sin_taper
    else:
      raise Exception(f"Wrong taper type {self.taper_type}")
      
    ys_ts = func(xs, self.sig0/2, self.sig1/2, self.exp_m)  # top signal taper
    ys_btg = func(xs, self.sig0/2+self.gap0, self.sig1/2+self.gap1, self.exp_m)  # bottom top ground taper
    ys_ttg = func(xs, self.sig0/2+self.gap0+self.gnd0, self.sig1/2+self.gap1+self.gnd1, self.exp_m)  # bottom top ground taper
    # transition ground top
    tr_gt = np.concatenate(((xs, ys_btg), (xs[::-1], ys_ttg[::-1])), axis=1).T/dbu  # [point, x/y]
    # transition singal
    tr_s = np.concatenate(((xs, ys_ts), (xs[::-1], -ys_ts[::-1])), axis=1).T/dbu
    # transition ground bottom
    tr_gb = np.concatenate(((xs, -ys_ttg), (xs[::-1], -ys_btg[::-1])), axis=1).T/dbu

    # create the shapes
    for i in (tr_gt, tr_s, tr_gb):
      ri = np.round(i).astype(int)  # for some reason the ntype p.int32 is still preserved after *j
      self.cell.shapes(self.l_layer).insert(pya.Polygon([pya.Point(int(j[0]), int(j[1])) for j in ri]))


class CPWdesign(pya.Library):
  """
  The library where we will put the PCell into 
  """

  def __init__(self):
  
    # Set the description
    self.description = "Tools for RF transmission line design"
    
    # Create the PCell declarations
    self.layout().register_pcell("PCPWTapers", PCPWTapers())
    # That would be the place to put in more PCells ...
    
    # Register us with the name "name".
    # If a library with that name already existed, it will be replaced then.
    self.register("CPWdesign")


# Instantiate and register the library
CPWdesign()
</text>
</klayout-macro>
